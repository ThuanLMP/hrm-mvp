// Code generated by the Encore 1.50.0 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly auth: auth.ServiceClient
    public readonly bonus: bonus.ServiceClient
    public readonly config: config.ServiceClient
    public readonly dashboard: dashboard.ServiceClient
    public readonly department: department.ServiceClient
    public readonly employee: employee.ServiceClient
    public readonly insurance: insurance.ServiceClient
    public readonly leave: leave.ServiceClient
    public readonly payroll: payroll.ServiceClient
    public readonly recruitment: recruitment.ServiceClient
    public readonly region: region.ServiceClient
    public readonly timesheet: timesheet.ServiceClient
    public readonly training: training.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.auth = new auth.ServiceClient(base)
        this.bonus = new bonus.ServiceClient(base)
        this.config = new config.ServiceClient(base)
        this.dashboard = new dashboard.ServiceClient(base)
        this.department = new department.ServiceClient(base)
        this.employee = new employee.ServiceClient(base)
        this.insurance = new insurance.ServiceClient(base)
        this.leave = new leave.ServiceClient(base)
        this.payroll = new payroll.ServiceClient(base)
        this.recruitment = new recruitment.ServiceClient(base)
        this.region = new region.ServiceClient(base)
        this.timesheet = new timesheet.ServiceClient(base)
        this.training = new training.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { login as api_auth_login_login } from "~backend/auth/login";
import { register as api_auth_register_register } from "~backend/auth/register";
import { verify as api_auth_verify_verify } from "~backend/auth/verify";

export namespace auth {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.login = this.login.bind(this)
            this.register = this.register.bind(this)
            this.verify = this.verify.bind(this)
        }

        /**
         * Login authenticates a user and returns a JWT token
         */
        public async login(params: RequestType<typeof api_auth_login_login>): Promise<ResponseType<typeof api_auth_login_login>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/login`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_login_login>
        }

        /**
         * Register creates a new user account
         */
        public async register(params: RequestType<typeof api_auth_register_register>): Promise<ResponseType<typeof api_auth_register_register>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/register`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_register_register>
        }

        /**
         * Verify validates a JWT token and returns user data
         */
        public async verify(params: RequestType<typeof api_auth_verify_verify>): Promise<ResponseType<typeof api_auth_verify_verify>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/verify`, {headers, method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_verify_verify>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { approve as api_bonus_approve_approve } from "~backend/bonus/approve";
import { create as api_bonus_create_create } from "~backend/bonus/create";
import { list as api_bonus_list_list } from "~backend/bonus/list";
import { listBonusTypes as api_bonus_list_types_listBonusTypes } from "~backend/bonus/list_types";
import { reject as api_bonus_reject_reject } from "~backend/bonus/reject";
import { stats as api_bonus_stats_stats } from "~backend/bonus/stats";

export namespace bonus {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.approve = this.approve.bind(this)
            this.create = this.create.bind(this)
            this.list = this.list.bind(this)
            this.listBonusTypes = this.listBonusTypes.bind(this)
            this.reject = this.reject.bind(this)
            this.stats = this.stats.bind(this)
        }

        public async approve(params: RequestType<typeof api_bonus_approve_approve>): Promise<ResponseType<typeof api_bonus_approve_approve>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                approvedBy: params.approvedBy,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/bonuses/${encodeURIComponent(params.id)}/approve`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_bonus_approve_approve>
        }

        public async create(params: RequestType<typeof api_bonus_create_create>): Promise<ResponseType<typeof api_bonus_create_create>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                amount:      params.amount,
                awardDate:   params.awardDate,
                bonusTypeId: params.bonusTypeId,
                description: params.description,
                employeeId:  params.employeeId,
                title:       params.title,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/bonuses`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_bonus_create_create>
        }

        public async list(params: RequestType<typeof api_bonus_list_list>): Promise<ResponseType<typeof api_bonus_list_list>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                bonusTypeId: params.bonusTypeId === undefined ? undefined : String(params.bonusTypeId),
                employeeId:  params.employeeId === undefined ? undefined : String(params.employeeId),
                endDate:     params.endDate === undefined ? undefined : params.endDate.toISOString(),
                limit:       params.limit === undefined ? undefined : String(params.limit),
                offset:      params.offset === undefined ? undefined : String(params.offset),
                search:      params.search,
                startDate:   params.startDate === undefined ? undefined : params.startDate.toISOString(),
                status:      params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/bonuses`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_bonus_list_list>
        }

        public async listBonusTypes(): Promise<ResponseType<typeof api_bonus_list_types_listBonusTypes>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/bonus/types`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_bonus_list_types_listBonusTypes>
        }

        public async reject(params: RequestType<typeof api_bonus_reject_reject>): Promise<ResponseType<typeof api_bonus_reject_reject>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                rejectionReason: params.rejectionReason,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/bonuses/${encodeURIComponent(params.id)}/reject`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_bonus_reject_reject>
        }

        public async stats(params: RequestType<typeof api_bonus_stats_stats>): Promise<ResponseType<typeof api_bonus_stats_stats>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                employeeId: params.employeeId === undefined ? undefined : String(params.employeeId),
                endDate:    params.endDate,
                startDate:  params.startDate,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/bonuses/stats`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_bonus_stats_stats>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { get as api_config_get_get } from "~backend/config/get";
import { update as api_config_update_update } from "~backend/config/update";

export namespace config {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.get = this.get.bind(this)
            this.update = this.update.bind(this)
        }

        /**
         * Gets all system configurations
         */
        public async get(): Promise<ResponseType<typeof api_config_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/config`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_config_get_get>
        }

        /**
         * Updates a system configuration
         */
        public async update(params: RequestType<typeof api_config_update_update>): Promise<ResponseType<typeof api_config_update_update>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/config`, {method: "PUT", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_config_update_update>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { stats as api_dashboard_stats_stats } from "~backend/dashboard/stats";

export namespace dashboard {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.stats = this.stats.bind(this)
        }

        /**
         * Gets comprehensive dashboard statistics
         */
        public async stats(): Promise<ResponseType<typeof api_dashboard_stats_stats>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/dashboard/stats`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_dashboard_stats_stats>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_department_create_create } from "~backend/department/create";
import { deleteDepartment as api_department_delete_deleteDepartment } from "~backend/department/delete";
import { get as api_department_get_get } from "~backend/department/get";
import { list as api_department_list_list } from "~backend/department/list";
import { update as api_department_update_update } from "~backend/department/update";

export namespace department {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.deleteDepartment = this.deleteDepartment.bind(this)
            this.get = this.get.bind(this)
            this.list = this.list.bind(this)
            this.update = this.update.bind(this)
        }

        /**
         * Creates a new department
         */
        public async create(params: RequestType<typeof api_department_create_create>): Promise<ResponseType<typeof api_department_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/departments`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_department_create_create>
        }

        /**
         * Deletes a department
         */
        public async deleteDepartment(params: { id: number }): Promise<void> {
            await this.baseClient.callTypedAPI(`/departments/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Gets a single department by ID
         */
        public async get(params: { id: number }): Promise<ResponseType<typeof api_department_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/departments/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_department_get_get>
        }

        /**
         * Lists all departments with employee counts
         */
        public async list(): Promise<ResponseType<typeof api_department_list_list>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/departments`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_department_list_list>
        }

        /**
         * Updates an existing department
         */
        public async update(params: RequestType<typeof api_department_update_update>): Promise<ResponseType<typeof api_department_update_update>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                description:  params.description,
                "manager_id": params["manager_id"],
                name:         params.name,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/departments/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_department_update_update>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_employee_create_create } from "~backend/employee/create";
import { deleteEmployee as api_employee_delete_deleteEmployee } from "~backend/employee/delete";
import { get as api_employee_get_get } from "~backend/employee/get";
import { list as api_employee_list_list } from "~backend/employee/list";
import { update as api_employee_update_update } from "~backend/employee/update";

export namespace employee {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.deleteEmployee = this.deleteEmployee.bind(this)
            this.get = this.get.bind(this)
            this.list = this.list.bind(this)
            this.update = this.update.bind(this)
        }

        /**
         * Creates a new employee
         */
        public async create(params: RequestType<typeof api_employee_create_create>): Promise<ResponseType<typeof api_employee_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/employees`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_employee_create_create>
        }

        /**
         * Deletes an employee
         */
        public async deleteEmployee(params: { id: number }): Promise<void> {
            await this.baseClient.callTypedAPI(`/employees/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Gets a single employee by ID
         */
        public async get(params: { id: number }): Promise<ResponseType<typeof api_employee_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/employees/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_employee_get_get>
        }

        /**
         * Lists all employees with optional filtering
         */
        public async list(params: RequestType<typeof api_employee_list_list>): Promise<ResponseType<typeof api_employee_list_list>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "department_id": params["department_id"] === undefined ? undefined : String(params["department_id"]),
                limit:           params.limit === undefined ? undefined : String(params.limit),
                offset:          params.offset === undefined ? undefined : String(params.offset),
                "region_id":     params["region_id"] === undefined ? undefined : String(params["region_id"]),
                search:          params.search,
                status:          params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/employees`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_employee_list_list>
        }

        /**
         * Updates an existing employee
         */
        public async update(params: RequestType<typeof api_employee_update_update>): Promise<ResponseType<typeof api_employee_update_update>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                address:         params.address,
                "date_of_birth": params["date_of_birth"],
                "department_id": params["department_id"],
                "full_name":     params["full_name"],
                phone:           params.phone,
                "photo_url":     params["photo_url"],
                position:        params.position,
                "region_id":     params["region_id"],
                salary:          params.salary,
                status:          params.status,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/employees/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_employee_update_update>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_insurance_create_create } from "~backend/insurance/create";
import { remove as api_insurance_delete_remove } from "~backend/insurance/delete";
import { get as api_insurance_get_get } from "~backend/insurance/get";
import { list as api_insurance_list_list } from "~backend/insurance/list";
import { update as api_insurance_update_update } from "~backend/insurance/update";

export namespace insurance {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.get = this.get.bind(this)
            this.list = this.list.bind(this)
            this.remove = this.remove.bind(this)
            this.update = this.update.bind(this)
        }

        public async create(params: RequestType<typeof api_insurance_create_create>): Promise<ResponseType<typeof api_insurance_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/insurance`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_insurance_create_create>
        }

        public async get(params: { id: string }): Promise<ResponseType<typeof api_insurance_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/insurance/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_insurance_get_get>
        }

        public async list(params: RequestType<typeof api_insurance_list_list>): Promise<ResponseType<typeof api_insurance_list_list>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "employee_id": params["employee_id"] === undefined ? undefined : String(params["employee_id"]),
                limit:         params.limit === undefined ? undefined : String(params.limit),
                page:          params.page === undefined ? undefined : String(params.page),
                search:        params.search,
                status:        params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/insurance`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_insurance_list_list>
        }

        public async remove(params: { id: string }): Promise<ResponseType<typeof api_insurance_delete_remove>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/insurance/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_insurance_delete_remove>
        }

        public async update(params: RequestType<typeof api_insurance_update_update>): Promise<ResponseType<typeof api_insurance_update_update>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "bank_account":            params["bank_account"],
                "bank_name":               params["bank_name"],
                "cccd_expiry_date":        params["cccd_expiry_date"],
                "company_unit":            params["company_unit"],
                "contract_date":           params["contract_date"],
                "household_registration":  params["household_registration"],
                "id_issue_date":           params["id_issue_date"],
                "id_issue_place":          params["id_issue_place"],
                "id_number":               params["id_number"],
                "is_shared":               params["is_shared"],
                "marital_status":          params["marital_status"],
                notes:                     params.notes,
                "number_of_children":      params["number_of_children"],
                "place_of_origin":         params["place_of_origin"],
                "social_insurance_number": params["social_insurance_number"],
                status:                    params.status,
                "tax_code":                params["tax_code"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/insurance/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_insurance_update_update>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { approve as api_leave_approve_approve } from "~backend/leave/approve";
import { getBalance as api_leave_balance_getBalance } from "~backend/leave/balance";
import { create as api_leave_create_create } from "~backend/leave/create";
import { list as api_leave_list_list } from "~backend/leave/list";
import { reject as api_leave_reject_reject } from "~backend/leave/reject";

export namespace leave {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.approve = this.approve.bind(this)
            this.create = this.create.bind(this)
            this.getBalance = this.getBalance.bind(this)
            this.list = this.list.bind(this)
            this.reject = this.reject.bind(this)
        }

        /**
         * Approves a leave request
         */
        public async approve(params: RequestType<typeof api_leave_approve_approve>): Promise<ResponseType<typeof api_leave_approve_approve>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "approved_by":      params["approved_by"],
                "rejection_reason": params["rejection_reason"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/leave/requests/${encodeURIComponent(params.leave_request_id)}/approve`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_leave_approve_approve>
        }

        /**
         * Creates a new leave request
         */
        public async create(params: RequestType<typeof api_leave_create_create>): Promise<ResponseType<typeof api_leave_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/leave/requests`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_leave_create_create>
        }

        /**
         * Get leave balance for an employee
         */
        public async getBalance(params: RequestType<typeof api_leave_balance_getBalance>): Promise<ResponseType<typeof api_leave_balance_getBalance>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "employee_id": String(params["employee_id"]),
                year:          params.year === undefined ? undefined : String(params.year),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/leave/balance`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_leave_balance_getBalance>
        }

        /**
         * Lists leave requests with optional filtering
         */
        public async list(params: RequestType<typeof api_leave_list_list>): Promise<ResponseType<typeof api_leave_list_list>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "employee_id": params["employee_id"] === undefined ? undefined : String(params["employee_id"]),
                "leave_type":  params["leave_type"],
                limit:         params.limit === undefined ? undefined : String(params.limit),
                offset:        params.offset === undefined ? undefined : String(params.offset),
                status:        params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/leave/requests`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_leave_list_list>
        }

        /**
         * Rejects a leave request
         */
        public async reject(params: RequestType<typeof api_leave_reject_reject>): Promise<ResponseType<typeof api_leave_reject_reject>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "approved_by":      params["approved_by"],
                "rejection_reason": params["rejection_reason"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/leave/requests/${encodeURIComponent(params.leave_request_id)}/reject`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_leave_reject_reject>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { calculateMonthly as api_payroll_calculate_calculateMonthly } from "~backend/payroll/calculate";

export namespace payroll {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.calculateMonthly = this.calculateMonthly.bind(this)
        }

        /**
         * Calculate monthly payroll for all active employees
         */
        public async calculateMonthly(params: RequestType<typeof api_payroll_calculate_calculateMonthly>): Promise<ResponseType<typeof api_payroll_calculate_calculateMonthly>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/payroll/calculate`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_payroll_calculate_calculateMonthly>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { createCandidate as api_recruitment_create_candidate_createCandidate } from "~backend/recruitment/create_candidate";
import { createInterview as api_recruitment_create_interview_createInterview } from "~backend/recruitment/create_interview";
import { createJobPosting as api_recruitment_create_job_createJobPosting } from "~backend/recruitment/create_job";
import { listCandidates as api_recruitment_list_candidates_listCandidates } from "~backend/recruitment/list_candidates";
import { listInterviews as api_recruitment_list_interviews_listInterviews } from "~backend/recruitment/list_interviews";
import { listJobPostings as api_recruitment_list_jobs_listJobPostings } from "~backend/recruitment/list_jobs";
import { getRecruitmentStats as api_recruitment_stats_getRecruitmentStats } from "~backend/recruitment/stats";

export namespace recruitment {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createCandidate = this.createCandidate.bind(this)
            this.createInterview = this.createInterview.bind(this)
            this.createJobPosting = this.createJobPosting.bind(this)
            this.getRecruitmentStats = this.getRecruitmentStats.bind(this)
            this.listCandidates = this.listCandidates.bind(this)
            this.listInterviews = this.listInterviews.bind(this)
            this.listJobPostings = this.listJobPostings.bind(this)
        }

        public async createCandidate(params: RequestType<typeof api_recruitment_create_candidate_createCandidate>): Promise<ResponseType<typeof api_recruitment_create_candidate_createCandidate>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                address:         params.address,
                coverLetter:     params.coverLetter,
                currentCompany:  params.currentCompany,
                currentPosition: params.currentPosition,
                dateOfBirth:     params.dateOfBirth,
                educationLevel:  params.educationLevel,
                email:           params.email,
                experienceYears: params.experienceYears,
                firstName:       params.firstName,
                gender:          params.gender,
                graduationYear:  params.graduationYear,
                lastName:        params.lastName,
                linkedinUrl:     params.linkedinUrl,
                major:           params.major,
                phone:           params.phone,
                portfolioUrl:    params.portfolioUrl,
                resumeUrl:       params.resumeUrl,
                skills:          params.skills,
                source:          params.source,
                university:      params.university,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/recruitment/candidates`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_recruitment_create_candidate_createCandidate>
        }

        public async createInterview(params: RequestType<typeof api_recruitment_create_interview_createInterview>): Promise<ResponseType<typeof api_recruitment_create_interview_createInterview>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                applicationId:   params.applicationId,
                durationMinutes: params.durationMinutes,
                interviewDate:   params.interviewDate,
                interviewType:   params.interviewType,
                interviewerIds:  params.interviewerIds,
                location:        params.location,
                meetingLink:     params.meetingLink,
                notes:           params.notes,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/recruitment/interviews`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_recruitment_create_interview_createInterview>
        }

        public async createJobPosting(params: RequestType<typeof api_recruitment_create_job_createJobPosting>): Promise<ResponseType<typeof api_recruitment_create_job_createJobPosting>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                benefits:        params.benefits,
                deadline:        params.deadline,
                departmentId:    params.departmentId,
                description:     params.description,
                employmentType:  params.employmentType,
                experienceLevel: params.experienceLevel,
                location:        params.location,
                requirements:    params.requirements,
                salaryMax:       params.salaryMax,
                salaryMin:       params.salaryMin,
                skills:          params.skills,
                title:           params.title,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/recruitment/jobs`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_recruitment_create_job_createJobPosting>
        }

        public async getRecruitmentStats(params: RequestType<typeof api_recruitment_stats_getRecruitmentStats>): Promise<ResponseType<typeof api_recruitment_stats_getRecruitmentStats>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                departmentId: params.departmentId === undefined ? undefined : String(params.departmentId),
                endDate:      params.endDate,
                startDate:    params.startDate,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/recruitment/stats`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_recruitment_stats_getRecruitmentStats>
        }

        public async listCandidates(params: RequestType<typeof api_recruitment_list_candidates_listCandidates>): Promise<ResponseType<typeof api_recruitment_list_candidates_listCandidates>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                experienceLevel: params.experienceLevel,
                limit:           params.limit === undefined ? undefined : String(params.limit),
                offset:          params.offset === undefined ? undefined : String(params.offset),
                search:          params.search,
                source:          params.source,
                status:          params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/recruitment/candidates`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_recruitment_list_candidates_listCandidates>
        }

        public async listInterviews(params: RequestType<typeof api_recruitment_list_interviews_listInterviews>): Promise<ResponseType<typeof api_recruitment_list_interviews_listInterviews>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                applicationId: params.applicationId === undefined ? undefined : String(params.applicationId),
                endDate:       params.endDate,
                interviewType: params.interviewType,
                limit:         params.limit === undefined ? undefined : String(params.limit),
                offset:        params.offset === undefined ? undefined : String(params.offset),
                startDate:     params.startDate,
                status:        params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/recruitment/interviews`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_recruitment_list_interviews_listInterviews>
        }

        public async listJobPostings(params: RequestType<typeof api_recruitment_list_jobs_listJobPostings>): Promise<ResponseType<typeof api_recruitment_list_jobs_listJobPostings>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                departmentId:    params.departmentId === undefined ? undefined : String(params.departmentId),
                employmentType:  params.employmentType,
                experienceLevel: params.experienceLevel,
                limit:           params.limit === undefined ? undefined : String(params.limit),
                offset:          params.offset === undefined ? undefined : String(params.offset),
                search:          params.search,
                status:          params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/recruitment/jobs`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_recruitment_list_jobs_listJobPostings>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_region_create_create } from "~backend/region/create";
import { deleteRegion as api_region_delete_deleteRegion } from "~backend/region/delete";
import { get as api_region_get_get } from "~backend/region/get";
import { list as api_region_list_list } from "~backend/region/list";
import { update as api_region_update_update } from "~backend/region/update";

export namespace region {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.deleteRegion = this.deleteRegion.bind(this)
            this.get = this.get.bind(this)
            this.list = this.list.bind(this)
            this.update = this.update.bind(this)
        }

        public async create(params: RequestType<typeof api_region_create_create>): Promise<ResponseType<typeof api_region_create_create>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                code:        params.code,
                description: params.description,
                name:        params.name,
                timezone:    params.timezone,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/regions`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_region_create_create>
        }

        public async deleteRegion(params: RequestType<typeof api_region_delete_deleteRegion>): Promise<ResponseType<typeof api_region_delete_deleteRegion>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/regions/${encodeURIComponent(params.id)}`, {headers, method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_region_delete_deleteRegion>
        }

        public async get(params: { id: number }): Promise<ResponseType<typeof api_region_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/regions/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_region_get_get>
        }

        public async list(): Promise<ResponseType<typeof api_region_list_list>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/regions`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_region_list_list>
        }

        public async update(params: RequestType<typeof api_region_update_update>): Promise<ResponseType<typeof api_region_update_update>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                code:        params.code,
                description: params.description,
                isActive:    params.isActive,
                name:        params.name,
                timezone:    params.timezone,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/regions/${encodeURIComponent(params.id)}`, {headers, method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_region_update_update>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { checkIn as api_timesheet_checkin_checkIn } from "~backend/timesheet/checkin";
import { checkOut as api_timesheet_checkout_checkOut } from "~backend/timesheet/checkout";
import { list as api_timesheet_list_list } from "~backend/timesheet/list";
import { today as api_timesheet_today_today } from "~backend/timesheet/today";

export namespace timesheet {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.checkIn = this.checkIn.bind(this)
            this.checkOut = this.checkOut.bind(this)
            this.list = this.list.bind(this)
            this.today = this.today.bind(this)
        }

        /**
         * Records employee check-in time
         */
        public async checkIn(params: RequestType<typeof api_timesheet_checkin_checkIn>): Promise<ResponseType<typeof api_timesheet_checkin_checkIn>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/timesheet/checkin`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_timesheet_checkin_checkIn>
        }

        /**
         * Records employee check-out time and calculates total hours
         */
        public async checkOut(params: RequestType<typeof api_timesheet_checkout_checkOut>): Promise<ResponseType<typeof api_timesheet_checkout_checkOut>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/timesheet/checkout`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_timesheet_checkout_checkOut>
        }

        /**
         * Lists timesheets with optional filtering
         */
        public async list(params: RequestType<typeof api_timesheet_list_list>): Promise<ResponseType<typeof api_timesheet_list_list>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "employee_id": params["employee_id"] === undefined ? undefined : String(params["employee_id"]),
                "end_date":    params["end_date"],
                limit:         params.limit === undefined ? undefined : String(params.limit),
                offset:        params.offset === undefined ? undefined : String(params.offset),
                "start_date":  params["start_date"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/timesheets`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_timesheet_list_list>
        }

        /**
         * Gets today's timesheet for an employee
         */
        public async today(params: RequestType<typeof api_timesheet_today_today>): Promise<ResponseType<typeof api_timesheet_today_today>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "employee_id": String(params["employee_id"]),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/timesheet/today`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_timesheet_today_today>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { createCourse as api_training_create_course_createCourse } from "~backend/training/create_course";
import { enrollEmployee as api_training_enroll_enrollEmployee } from "~backend/training/enroll";
import { listCategories as api_training_list_categories_listCategories } from "~backend/training/list_categories";
import { listCourses as api_training_list_courses_listCourses } from "~backend/training/list_courses";
import { getStats as api_training_stats_getStats } from "~backend/training/stats";

export namespace training {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createCourse = this.createCourse.bind(this)
            this.enrollEmployee = this.enrollEmployee.bind(this)
            this.getStats = this.getStats.bind(this)
            this.listCategories = this.listCategories.bind(this)
            this.listCourses = this.listCourses.bind(this)
        }

        public async createCourse(params: RequestType<typeof api_training_create_course_createCourse>): Promise<ResponseType<typeof api_training_create_course_createCourse>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                categoryId:      params.categoryId,
                cost:            params.cost,
                courseType:      params.courseType,
                description:     params.description,
                durationHours:   params.durationHours,
                endDate:         params.endDate,
                imageUrl:        params.imageUrl,
                instructor:      params.instructor,
                location:        params.location,
                maxParticipants: params.maxParticipants,
                startDate:       params.startDate,
                title:           params.title,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/training/courses`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_training_create_course_createCourse>
        }

        public async enrollEmployee(params: RequestType<typeof api_training_enroll_enrollEmployee>): Promise<ResponseType<typeof api_training_enroll_enrollEmployee>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                authorization: params.authorization,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                courseId:   params.courseId,
                employeeId: params.employeeId,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/training/enroll`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_training_enroll_enrollEmployee>
        }

        public async getStats(params: RequestType<typeof api_training_stats_getStats>): Promise<ResponseType<typeof api_training_stats_getStats>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                categoryId: params.categoryId === undefined ? undefined : String(params.categoryId),
                endDate:    params.endDate,
                startDate:  params.startDate,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/training/stats`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_training_stats_getStats>
        }

        public async listCategories(): Promise<ResponseType<typeof api_training_list_categories_listCategories>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/training/categories`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_training_list_categories_listCategories>
        }

        public async listCourses(params: RequestType<typeof api_training_list_courses_listCourses>): Promise<ResponseType<typeof api_training_list_courses_listCourses>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                categoryId: params.categoryId === undefined ? undefined : String(params.categoryId),
                courseType: params.courseType,
                endDate:    params.endDate === undefined ? undefined : params.endDate.toISOString(),
                limit:      params.limit === undefined ? undefined : String(params.limit),
                offset:     params.offset === undefined ? undefined : String(params.offset),
                search:     params.search,
                startDate:  params.startDate === undefined ? undefined : params.startDate.toISOString(),
                status:     params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/training/courses`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_training_list_courses_listCourses>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}


// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.50.0)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
